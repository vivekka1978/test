package oracle.fod.storefront.entity;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.TxnValException;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.domain.Number;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Nov 14 19:58:31 PST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class OrderEOImpl extends EntityImpl {
    /**
     * Validation method for OrderShippedDate.
     */
    public boolean validateShippedDateAfterOrderDate(Timestamp ordershippeddate) {
        return ordershippeddate==null||ordershippeddate.compareTo(getOrderDate())>=0;
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        OrderId,
        OrderDate,
        OrderShippedDate,
        OrderStatusCode,
        OrderTotal,
        CustomerId,
        ShipToName,
        ShipToAddressId,
        ShipToPhoneNumber,
        ShippingOptionId,
        PaymentOptionId,
        DiscountId,
        CouponId,
        FreeShippingFlag,
        CustomerCollectFlag,
        CollectionWarehouseId,
        GiftwrapFlag,
        GiftwrapMessage,
        CreatedBy,
        CreationDate,
        LastUpdatedBy,
        LastUpdateDate,
        ObjectVersionId,
        OrderItem,
        Person,
        OrderItem1;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ORDERID = AttributesEnum.OrderId.index();
    public static final int ORDERDATE = AttributesEnum.OrderDate.index();
    public static final int ORDERSHIPPEDDATE = AttributesEnum.OrderShippedDate.index();
    public static final int ORDERSTATUSCODE = AttributesEnum.OrderStatusCode.index();
    public static final int ORDERTOTAL = AttributesEnum.OrderTotal.index();
    public static final int CUSTOMERID = AttributesEnum.CustomerId.index();
    public static final int SHIPTONAME = AttributesEnum.ShipToName.index();
    public static final int SHIPTOADDRESSID = AttributesEnum.ShipToAddressId.index();
    public static final int SHIPTOPHONENUMBER = AttributesEnum.ShipToPhoneNumber.index();
    public static final int SHIPPINGOPTIONID = AttributesEnum.ShippingOptionId.index();
    public static final int PAYMENTOPTIONID = AttributesEnum.PaymentOptionId.index();
    public static final int DISCOUNTID = AttributesEnum.DiscountId.index();
    public static final int COUPONID = AttributesEnum.CouponId.index();
    public static final int FREESHIPPINGFLAG = AttributesEnum.FreeShippingFlag.index();
    public static final int CUSTOMERCOLLECTFLAG = AttributesEnum.CustomerCollectFlag.index();
    public static final int COLLECTIONWAREHOUSEID = AttributesEnum.CollectionWarehouseId.index();
    public static final int GIFTWRAPFLAG = AttributesEnum.GiftwrapFlag.index();
    public static final int GIFTWRAPMESSAGE = AttributesEnum.GiftwrapMessage.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int LASTUPDATEDATE = AttributesEnum.LastUpdateDate.index();
    public static final int OBJECTVERSIONID = AttributesEnum.ObjectVersionId.index();
    public static final int ORDERITEM = AttributesEnum.OrderItem.index();
    public static final int PERSON = AttributesEnum.Person.index();
    public static final int ORDERITEM1 = AttributesEnum.OrderItem1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public OrderEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("oracle.fod.storefront.entity.OrderEO");
    }


    /**
     * Gets the attribute value for OrderId, using the alias name OrderId.
     * @return the value of OrderId
     */
    public Long getOrderId() {
        return (Long) getAttributeInternal(ORDERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrderId.
     * @param value value to set the OrderId
     */
    public void setOrderId(Long value) {
        setAttributeInternal(ORDERID, value);
    }

    /**
     * Gets the attribute value for OrderDate, using the alias name OrderDate.
     * @return the value of OrderDate
     */
    public Timestamp getOrderDate() {
        return (Timestamp) getAttributeInternal(ORDERDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrderDate.
     * @param value value to set the OrderDate
     */
    public void setOrderDate(Timestamp value) {
        setAttributeInternal(ORDERDATE, value);
    }

    /**
     * Gets the attribute value for OrderShippedDate, using the alias name OrderShippedDate.
     * @return the value of OrderShippedDate
     */
    public Timestamp getOrderShippedDate() {
        return (Timestamp) getAttributeInternal(ORDERSHIPPEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrderShippedDate.
     * @param value value to set the OrderShippedDate
     */
    public void setOrderShippedDate(Timestamp value) {
        setAttributeInternal(ORDERSHIPPEDDATE, value);
    }

    /**
     * Gets the attribute value for OrderStatusCode, using the alias name OrderStatusCode.
     * @return the value of OrderStatusCode
     */
    public String getOrderStatusCode() {
        return (String) getAttributeInternal(ORDERSTATUSCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrderStatusCode.
     * @param value value to set the OrderStatusCode
     */
    public void setOrderStatusCode(String value) {
        setAttributeInternal(ORDERSTATUSCODE, value);
    }

    /**
     * Gets the attribute value for OrderTotal, using the alias name OrderTotal.
     * @return the value of OrderTotal
     */
    public BigDecimal getOrderTotal() {
        return (BigDecimal) getAttributeInternal(ORDERTOTAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrderTotal.
     * @param value value to set the OrderTotal
     */
    public void setOrderTotal(BigDecimal value) {
        setAttributeInternal(ORDERTOTAL, value);
    }

    /**
     * Gets the attribute value for CustomerId, using the alias name CustomerId.
     * @return the value of CustomerId
     */
    public Long getCustomerId() {
        return (Long) getAttributeInternal(CUSTOMERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CustomerId.
     * @param value value to set the CustomerId
     */
    public void setCustomerId(Long value) {
        setAttributeInternal(CUSTOMERID, value);
    }

    /**
     * Gets the attribute value for ShipToName, using the alias name ShipToName.
     * @return the value of ShipToName
     */
    public String getShipToName() {
        return (String) getAttributeInternal(SHIPTONAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for ShipToName.
     * @param value value to set the ShipToName
     */
    public void setShipToName(String value) {
        setAttributeInternal(SHIPTONAME, value);
    }

    /**
     * Gets the attribute value for ShipToAddressId, using the alias name ShipToAddressId.
     * @return the value of ShipToAddressId
     */
    public Long getShipToAddressId() {
        return (Long) getAttributeInternal(SHIPTOADDRESSID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ShipToAddressId.
     * @param value value to set the ShipToAddressId
     */
    public void setShipToAddressId(Long value) {
        setAttributeInternal(SHIPTOADDRESSID, value);
    }

    /**
     * Gets the attribute value for ShipToPhoneNumber, using the alias name ShipToPhoneNumber.
     * @return the value of ShipToPhoneNumber
     */
    public String getShipToPhoneNumber() {
        return (String) getAttributeInternal(SHIPTOPHONENUMBER);
    }

    /**
     * Sets <code>value</code> as the attribute value for ShipToPhoneNumber.
     * @param value value to set the ShipToPhoneNumber
     */
    public void setShipToPhoneNumber(String value) {
        setAttributeInternal(SHIPTOPHONENUMBER, value);
    }

    /**
     * Gets the attribute value for ShippingOptionId, using the alias name ShippingOptionId.
     * @return the value of ShippingOptionId
     */
    public Long getShippingOptionId() {
        return (Long) getAttributeInternal(SHIPPINGOPTIONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ShippingOptionId.
     * @param value value to set the ShippingOptionId
     */
    public void setShippingOptionId(Long value) {
        setAttributeInternal(SHIPPINGOPTIONID, value);
    }

    /**
     * Gets the attribute value for PaymentOptionId, using the alias name PaymentOptionId.
     * @return the value of PaymentOptionId
     */
    public Long getPaymentOptionId() {
        return (Long) getAttributeInternal(PAYMENTOPTIONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for PaymentOptionId.
     * @param value value to set the PaymentOptionId
     */
    public void setPaymentOptionId(Long value) {
        setAttributeInternal(PAYMENTOPTIONID, value);
    }

    /**
     * Gets the attribute value for DiscountId, using the alias name DiscountId.
     * @return the value of DiscountId
     */
    public Long getDiscountId() {
        return (Long) getAttributeInternal(DISCOUNTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DiscountId.
     * @param value value to set the DiscountId
     */
    public void setDiscountId(Long value) {
        setAttributeInternal(DISCOUNTID, value);
    }

    /**
     * Gets the attribute value for CouponId, using the alias name CouponId.
     * @return the value of CouponId
     */
    public Long getCouponId() {
        return (Long) getAttributeInternal(COUPONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CouponId.
     * @param value value to set the CouponId
     */
    public void setCouponId(Long value) {
        setAttributeInternal(COUPONID, value);
    }

    /**
     * Gets the attribute value for FreeShippingFlag, using the alias name FreeShippingFlag.
     * @return the value of FreeShippingFlag
     */
    public String getFreeShippingFlag() {
        return (String) getAttributeInternal(FREESHIPPINGFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for FreeShippingFlag.
     * @param value value to set the FreeShippingFlag
     */
    public void setFreeShippingFlag(String value) {
        setAttributeInternal(FREESHIPPINGFLAG, value);
    }

    /**
     * Gets the attribute value for CustomerCollectFlag, using the alias name CustomerCollectFlag.
     * @return the value of CustomerCollectFlag
     */
    public String getCustomerCollectFlag() {
        return (String) getAttributeInternal(CUSTOMERCOLLECTFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for CustomerCollectFlag.
     * @param value value to set the CustomerCollectFlag
     */
    public void setCustomerCollectFlag(String value) {
        setAttributeInternal(CUSTOMERCOLLECTFLAG, value);
    }

    /**
     * Gets the attribute value for CollectionWarehouseId, using the alias name CollectionWarehouseId.
     * @return the value of CollectionWarehouseId
     */
    public Long getCollectionWarehouseId() {
        return (Long) getAttributeInternal(COLLECTIONWAREHOUSEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CollectionWarehouseId.
     * @param value value to set the CollectionWarehouseId
     */
    public void setCollectionWarehouseId(Long value) {
        setAttributeInternal(COLLECTIONWAREHOUSEID, value);
    }

    /**
     * Gets the attribute value for GiftwrapFlag, using the alias name GiftwrapFlag.
     * @return the value of GiftwrapFlag
     */
    public String getGiftwrapFlag() {
        return (String) getAttributeInternal(GIFTWRAPFLAG);
    }

    /**
     * Sets <code>value</code> as the attribute value for GiftwrapFlag.
     * @param value value to set the GiftwrapFlag
     */
    public void setGiftwrapFlag(String value) {
        setAttributeInternal(GIFTWRAPFLAG, value);
    }

    /**
     * Gets the attribute value for GiftwrapMessage, using the alias name GiftwrapMessage.
     * @return the value of GiftwrapMessage
     */
    public String getGiftwrapMessage() {
        return (String) getAttributeInternal(GIFTWRAPMESSAGE);
    }

    /**
     * Sets <code>value</code> as the attribute value for GiftwrapMessage.
     * @param value value to set the GiftwrapMessage
     */
    public void setGiftwrapMessage(String value) {
        setAttributeInternal(GIFTWRAPMESSAGE, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public String getCreatedBy() {
        return (String) getAttributeInternal(CREATEDBY);
    }


    /**
     * Gets the attribute value for CreationDate, using the alias name CreationDate.
     * @return the value of CreationDate
     */
    public Timestamp getCreationDate() {
        return (Timestamp) getAttributeInternal(CREATIONDATE);
    }

    /**
     * Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy.
     * @return the value of LastUpdatedBy
     */
    public String getLastUpdatedBy() {
        return (String) getAttributeInternal(LASTUPDATEDBY);
    }


    /**
     * Gets the attribute value for LastUpdateDate, using the alias name LastUpdateDate.
     * @return the value of LastUpdateDate
     */
    public Timestamp getLastUpdateDate() {
        return (Timestamp) getAttributeInternal(LASTUPDATEDATE);
    }

    /**
     * Gets the attribute value for ObjectVersionId, using the alias name ObjectVersionId.
     * @return the value of ObjectVersionId
     */
    public Long getObjectVersionId() {
        return (Long) getAttributeInternal(OBJECTVERSIONID);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getOrderItem() {
        return (RowIterator) getAttributeInternal(ORDERITEM);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getPerson() {
        return (EntityImpl) getAttributeInternal(PERSON);
    }

    @Override
    protected Object getHistoryContextForAttribute(AttributeDefImpl attributeDefImpl) {
        // TODO Implement this method
        Object value =super.getHistoryContextForAttribute(attributeDefImpl);
        /*
         * If the value is NULL and is modifiy user or create user, return user 
         * value as anonymous.
         * 
         */
        if  (( value == null) && (attributeDefImpl.getHistoryKind()== attributeDefImpl.HISTORY_MODIFY_USER || attributeDefImpl.getHistoryKind()== attributeDefImpl.HISTORY_CREATE_USER) )
               {
                   return "anonymous";
               }
        return value;
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setPerson(EntityImpl value) {
        setAttributeInternal(PERSON, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getOrderItem1() {
        return (RowIterator) getAttributeInternal(ORDERITEM1);
    }


    /*Add an item to the order. Typically used to add items to the shopping cart.
     * @param productid
      * */


    /**
     * @param orderId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Long orderId) {
        return new Key(new Object[] { orderId });
    }

    public void addItemToOrder(Long productid){
        if (productid == null){
            System.err.println("No Proudct id!!!");
            throw new NullPointerException();
        }
        RowIterator orderItems = getOrderItem();
        assert orderItems != null;
        OrderItemEOImpl row ;
        boolean found =false;
        for(row=(OrderItemEOImpl)orderItems.first();row!=null;row=(OrderItemEOImpl)orderItems.next()){
            if (row.getProductId() == productid) {
                found = true;
                break;
            }
                   
        }
    if (found) {
              Number qty = row.getQuantity(); 
              if (qty == null)
              {
                  qty =  new Number(1);
                  }
              else {
                  qty = qty.add(1);
                  row.setQuantity(qty);
              }
           }
    else{
        OrderItemEOImpl newItem = (OrderItemEOImpl)orderItems.createRow();
        EntityDefImpl productDef=EntityDefImpl.findDefObject("oracle.fod.storefront.entity.ProductEO");
        EntityImpl productEo=productDef.findByPrimaryKey(getDBTransaction(),new Key(new  Object[]{productid}));
        BigDecimal unitPrice =(BigDecimal)productEo.getAttribute("ListPrice");
        newItem.setProductId(productid);
        newItem.setQuantity(new Number(1));
        newItem.setUnitPrice(unitPrice);
        try{
            getDBTransaction().validate();
        }catch(TxnValException e){
            System.out.println(e.getMessage());
            for(Throwable t: e.getExceptions()){
                System.out.println(t.getMessage());
            }
            }
        catch(JboException e){
            System.out.println(e.getMessage());
        }
    }
}}

